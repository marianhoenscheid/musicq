stages:
  - build
  - deploy

react-build:
  image: node:18-alpine3.15
  stage: build
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths:
      - web/node_modules/
  script: 
    - cd web
    - npm install
    - npm run-script build 
  artifacts:
    paths:
      - web/build
  needs: []
  tags:
    - linux

docker-core:
  # Use the official docker image.
  image: docker:latest
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build -f core.Dockerfile --pull -t "$CI_REGISTRY_IMAGE/core${tag}" .
    - docker push "$CI_REGISTRY_IMAGE/core${tag}"
    # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - core.Dockerfile
  needs: []
  tags: 
    - linux

minify:
  stage: build
  image: tdewolff/minify
  artifacts:
    paths:
      - web/minified
  script: 
    - minify -r -s -o web/minified web/build/
  needs: ["react-build"]
  tags:
    - linux

docker-web:
  # Use the official docker image.
  image: docker:latest
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build -f nginx.Dockerfile --pull -t "$CI_REGISTRY_IMAGE/web${tag}" .
    - docker push "$CI_REGISTRY_IMAGE/web${tag}"
    # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - nginx.Dockerfile
  needs: ["minify"]
  tags: 
    - linux

deploy:
  stage: deploy
  image: node:latest
  script: 
    - npm install -g wrangler
    - npx wrangler pages deploy web/minified --project-name $CLOUDFLARE_PAGES_PROJECT_NAME --branch $CI_COMMIT_REF_NAME
  needs: ["minify"]
  tags: 
    - linux